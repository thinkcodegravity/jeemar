 Jee - website
	Java installed (1.8)
	Spring tool suite - development
		pre-installed with all the softwares necessary for spring framework/webservice etc
	putty - remote control software
	winscp - file uploading software
	maven - build software
	Git - code repository
	
Java - (Core java)
	web development : JEE (Advanced Java)
		Spring framework
		hibernate
		sping data
		struts
		webservice framework
	mobile app development : J2ME
	desktop app development : AWT
	
	
Internet
	network of devices
	wireline : home network
		router/modem
	wireless : cell data plan
		satellite
		
	router
	intranet
	lan
	
	wan
	
	
	IPAddress = Internet Protocol Address
	unique identifier for every device connected to internet
	
	IPv4 = IP version 4
	X.X.X.X
	
	X = 0-255
	
	123.34.22.225
	0.0.0.0
	0.0.0.1
	0.0.0.2
	.......
	255.255.255.255
	
	Total range of IP address : 256 x 256 x 256 x 256 = 4 billion ip address
	
	8 billion people = 5 billion users
	1-3 atleast
	2 devices per person X 5 billion  = 10 billion devices connected the internet
	
	
	
	IPv6 = IP version 6
	
	xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx
	
	x= hexa decimal... 0-9 and A-F
	1A37:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx
	
	range of ipv6 addresss= trillions ip address
	
	
	
wireless
wireline
wifi
internet
intranet
lan
domainname
DHCP
DNS
LAN ip
WAN ip
ipv4
ipv6
router
port
m/c security
firewall


ipconfig : ipaddress of your machine
ping : remote machine is reachable
telnet
tracert


xml and jira

XML : Extensible Markup Language
HTML : HyperText Markup Language
SGML
WML

Meta-Data
Information about Data

john qwewqe 123 qewqeqwe 213123 awdawe adada
jane asdsadd 345 adqweqew 213121 adwqqq asdsad

john qwewqe asdsad 123 qewqeqwe 213123 awdawe adada

mark / tag 

<name>john</name> 
<bldgName>qwewqe</bldgName>
<bldgNum>123</bldgNum> 
<city>qewqeqwe</city> 
<zip>213123</zip> 
<state>awdawe</state> 
<country>adada</country>

<name> = name tag or name element
	<name> = opening tag
	</name> = closing tag
opening and closing tags - boundary
<name>john</name> 


<address>
	<customer age="10" >
		<name>
			<firstname>john</firstname>
			<lastname>doe</lastname>
		</name> 
		<bldgName>qwewqe</bldgName>
		<bldgNum>123</bldgNum> 
	</customer>
	<customer>
		<name>jane</name> 
		<bldgName>asdsa</bldgName>
		<bldgNum>456</bldgNum> 
	</customer>
</address>


<address> = root element / root tag ( overview of data stored in this file )
nested element : element inside element 
Parent element : Customer is parent element of name,bldgName,bldgNum
Child element : Customer  is child element of address
Silbling element: name and bldgName are sibling element

value = information between opening and closing tag

attributes : simple key value pair

elements and attributes
	elements contain sub information (object or complex data type)
	attributes single value information (primitive or simple data type)




Java variables
	String name="john";
	int age=10;
	float weight=100.23;
	boolean active=true;
Javascript variables
	var name="john";
	var age=10;
	var weight=100.23;
	var active=true;
Java method
	int result=addition(10,20); 
	
	public int addition(int a, int b){
		int sum=a+b;
		return sum;
	}
Javascript method
	var result=addition(10,20); 
	
	function  addition( a,  b){
		var sum=a+b;
		return sum;
	}	

	
java and javascript opertor
	var multiply= a * b; // arithmetic operator
	var x=10;
	var y=10;
	var z=20;
	x==y  // true // equality operator
	x!=z   // true
	
	// relational operator
	x > y // false
	
	// incerement operator
	
	// conditional operator
	x==y && x>z
	true && false
	false
	
java and javascript control flow
var a=10;
var b=20;

if( a == b)
	console.log(" a is equal to b");
else
	console.log(" a is not equal to b");

for(var i=0 ; i < 3 ; i++)
	console.log("hi");

var checkout=false;
while(checkout == true)
	console.log("order is placed");

do-while
switch case


	var student={
		name:"jane",
		grade:1,
		school:"ABC school",
		getGrade(){
			return this.grade;
		},
		sub(a,b){
			return a-b;
		}
	}
console.log(student.name);
var gr=student.getGrade();
	
	
public class Student{
		String name="jane";
		int grade=1;
		String school="ABC school";
		public int getGrade(){
			return this.grade;
		}
		public int sub(int a,int b){
			return a-b;
		}
}
Student st=new Student();
sysout(   st.name );
int stugrade=st.getGrade();


event listeners :
	mouse : click, move
	keyboard : typing
	webpage/dcoument : open, close, scroll 
	
Javascript monitors customer activity
by above even listeneres



********************************* JQUERY *******************************************************
what did customer type in username textbox
	javascript code
		var user=document.getElementById("username").value;
	jquery code
		var user=$("#username").val();	
		
	1) short hand version of javascript code 
	2) decouple architecture
		together = separated
		allows to separate javascript code from Html code
	3) multiple options to identify html code
	4) animation
	
<div id="code1">
	<div id="code2">abcd</div>
	<div id="code3">abcd</div>
</div>

$("#code1").child()
	
$("#code2").text() = read value between 
	code2 opening and closing tag
	abcd = the text in code2 eleemnt
$("#code1").html() = read html code in div code1
	<div id="code2">abcd</div> = html code inside code1
	
	if no input.... READ
	$("#username").val();
	if input... WRITE
	$("#username").val( "abcd" );
	
	
	
	


Web server : web software that enables http software hosted on internet
	Tomcat,weblgoic,websphere,jboss,glasssfish - Http Web Server Software
			SMTP web server softwar
			FTP web server software
			

Servlet : java program that processes customer request


http://amazon.com/login?userid=john&pwd=john1!
query string = part of url that appears afte the question mark

req.getQuerystring()
	userid=john&pwd=john1!
req.getParameter("userid")
	john
	
	
DDL query - Data Definition Language
	create/delete/modify table
DML query - Data Manipulation Language
	create/update/delete/read records in the table
	
create table customers(
	userid varchar(64),
	password varchar(64),
	address varchar(64),
	primary key (userid) 
	
)

Expedia >>>>>>>>>>>>>>> SouthWest
String source=ny			var 
String destn=ca

Server side java program

java program - that customer can access by typing URL

Customer >>> Http URL >>>>> Server side java program

http://www.amazon.com

http://www.amazon.com/login
Servlet - @WebServlet("/login")

Rest webservice - @RestController

Soap webservice

xml, json,key-value pair

http://www.amazon.com/shopping.html
NO Get - part of url
<GiveFlightDetails><source>ny</source><destination>ca</destination></GiveFlightDetails>
{
	"source":"ny",
	"dest":"ca"
}
source=ny&dest=ca

Simple input format
	http://www.aa.com/flights2/NY/Chicago
	http://www.aa.com/flights2?source=NY&destination=Chicago
Complex input format
	http://www.aa.com/flights2/
	
xml and json
	source ny
	desitnation chicago
	departure time 12/31
	passenger details
		passenger1
			name
			age
			seat
		passenger2
			name
			age
			seat


<flightDetails>
	<source> ny</source>
	<desitnation> chicago<desitnation> 
	<departure time> 12/31<departure time> 
	<passenger details>
		<passenger1>
			<name><name>
			<age><age>
			<seat><seat>
			<nickName>
				<name>john</name>
				<name>j</name>
				<name>johnny</name>
			</nickName>
		<passenger1>
		<passenger2>
			<name><name>
			<age><age>
			<seat><seat>
		<passenger2>			
	<passenger details>
</flightDetails>

JavaScript Object Notation
{	
	"source" : "ny",
	"desitnation" : "chicago",
	"departure time" : "12/31",
	"passengerdetails":{
		"passenger1" : {
			"name" :"john",
			"age" : 21,
			"seat" : "1A",
			"weight" : 150.1,
			"rewardsCustomer":true,
			"nickNames" : [ "john","j","johnny"   ]
			} ,
		"passenger2" :{
			"name": "jane",
			"age": 20,
			"seat": "1B",
			"weight" : 100.1,
			"rewardsCustomer":true
			}
	}
}
1) attribute double quoted like string
2) attribute and value are separated by :
3) multiple attribute-value pair are separated by ,
4) value can be any data... String , int , fraction, boolean, complex value - {} , array



Rest webservice with JSON
	POST input choice
	/ny/chicago
	?src=ny&dest=chicago
	{
		"firstName": "john",
		"lastName": "doe",
		"passportNum": 123456,
		"passportExpiryMonth": 12,
		"passportExpiryYear": 2028,
	}
	
	@RequestMapping(value = "/passportInfo", 
			method = RequestMethod.POST,
			consumes = MediaType.APPLICATION_JSON_VALUE
			)
			public String booking(@RequestBody  PassportInfo  pi){
		
	
		
	{
		"firstName": "john",
		"lastName": "doe",
		"passportNum": 123456,
		"passportExpiryMonth": 12,
		"passportExpiryYear": 2028,
	}
	
	Convert JSON input into Java class/object
	JSON mapper - jackson

	// passportinfo java program REPRESNTING the above json data
	public class PassportInfo{
		String firstName; // setFirstName = set is used to store values , get is used to read value
		String lastName;
		int passportNum;
		int passportExpiryMonth;
		int passportExpiryYear;
	}
	
	input = webservice recieve/consume data
	output = webservice return/produce data
	
Rest webservice with JSON
	output is complex
	
	http://localhost/getFlightDetails/ny/chicago

	{
		"airline":"AA123",
		"departureAirport":"JFK",
		"arrivalAirport":"Ohare",
		"departureTime":"6:00 am",
		"arrivalTime":"7:00 am",
		"seatAvailable":3
	}

	public class FlightDetails{
		String airline;
		String departureAirport;
		String arrivalAirport;
		String departureTime;
		String arrivalTime;
		int seatAvailable;
	}
	
	Flight Detail webservice
4 services
1) give input /flights/ny/chicago
2)

documentation

how to use webservice
how many service u have
what does each service do
what input is needed
what output can be expected

Rest with json
Json
postman

Swagger

Webservice documentation tool
1) include swagger dependancy in pom.xml
2) include swagger program in project
3) in swagger program mention the package names (where all webservice are located)

http://website.com/swagger-ui.html

SOAP

soap development  - 
	Top-down approach : Expert programmers
		1) create WSDL file manually
		2) generate java program from wsdl
			wsdl2java
		3) logic in java program
	
	Bottom-Up approach 
		1) create java program with logic
		2) WSDL file created auto
		
		configuration can be xml or annotation(Apache CXF framework)
		
Bottom-up approach
create
	1) write simple java code
	2) tag/mark this program as soap webservice @WebService
	3) expose/publish this soap program to the internet
		via http url
	
	
	
Soap UI

SOAP input
SOAP output

WSDL : WebService Description Language
	xml file that explains/describes the webservice in platform
	neutral language

SOAP transaction type
	RPC : simple webservice (faster)
		primitive data type or string
		NO validation - NO XSD schema included
		
	Document : complex webservice (slower)
		complex object, collection, array
		validation - XSD schema included
	
validation are driven by xsd xml file
	xml schema definition
	
	input is mandatory
	input should be integer

JAXB
	Convert XML to Java
	Convert Java to XMl
	
	
Rest webservice
	get = http://localhost/add/10/20
		Testing software - BROWSER
	post = http://localhost/add
		body : { "input1":10, "input2":20}
		Testing software - POSTMAN
		
Soap webservice
	http://localhost:9090/soapcalculaotr
		Testing software - SOAP UI
		
*********************** Spring framework *********************** 

Framework : Proven solution to a known problem 

Jee frameworks : Struts , Spring, Hibernate, Logging, webservice

Spring Framework :Framework of frameworks
	IOC Inversion Of Control / DI Dependancy Injection
	AOP Aspect Oriented Programming


1) copy all the dependancies from pom.xml
2) application.properties - configure
		Spring ui (webpage configuration)
			prefix = /view/
			suffix = .jsp
		
		under webapp
			/view/success.jsp
			/view/error.jsp

		Spring data(database configuration)
3) configure main java program
	xxxxxxApplication.java
		configure @ComponentScan... name of the packages where spring program exists


Registration example





************8 aspect
execution ( int com.amazon.login.Authentication.*(String) )
	target extra code to a specific method
within(com..*) 
	extra code to all methods ,in all the class in entire package
Bean(*Manager)	
	extra code applies to all method in the spring bean programs
	that end with name Manager

execution ( int com.amazon.login.Authentication.*(String) )
	||
execution ( boolean com.amazon.login.Authentication.*(String,String) )	
	extra code applies to any method in Authentication program
	that has
	int as return type and 1 string input
	OR
	boolean as return type and 2 string input




Read a record from database 

1) findBy
List<userEntity> findByEmAndPwd(String a,String b);	

2) jpql query 
jpql	java persistent query language		
@Query("select u from UserEntity u where u.em=?1 and u.pwd=?2")			
List<userEntity>		jpqlEmPwd(String a,String b);	

3) SQL	Structured query language		
@Query(value="select * from users where email=?1 and password=?2", nativeQuery=true)			
List<userEntity> sqlEmPwd(String a,String b);




read records - give group of records.... group of entity objects
findBy

sqlEmPwd("john@g.com","john123");
sqlEmPwd("jane@g.com","jane1233");


Static binding - fixed input query
select * from users where email='john@g.com' and password='john123'

Dynamic binding - variable input in query

******************************* log4j *******************************

log book - record

What is logging - information printed on file or console

What info is printed in logging - information about website software, information about your customer
	tomat started the website
	ORM for database
	customer john is trying to pay the bill
	customer john payment was declined due to insuff balance

Why logging - website monitoring, software monitoring, Production support
	tomcat server crashed due to high traffic
	ORM failed due to database shutdown

logging - 
	System.out.print -
		drawback sysout
		1) no timestamp printed - product support focus on 1 out of 1000 attempts when error happned
		2) No program or line number tracing - pin point the source of the problem
		3) temprory - server restart will loose all messages from console
		4) cannot control which message to print
		customer john had a error
		
	log4j
		1) no timestamp printed - product support focus on 1 out of 1000 attempts when error happned
		2) No program or line number tracing - pin point the source of the problem
		3) temprory - server restart will loose all messages from console
			allows to print in permanaent file on hard drive AND console
		2023-02-24 09:36 INFO AreaCalcualtor:35 - customer john had a error 


DEBUG - finding the issue/problem
	Frontend debug - HTML, CSS, Javascript (customer browser)
		javascript - browser console
		HTML/css - browser source
		
	Network debug
		browser insepect > network tab > 4XX 5XX
	
	Backend debug - Java program (website machine)
		look at exceptions in console or log4j files
	